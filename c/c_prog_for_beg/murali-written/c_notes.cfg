(void*) -> means ptr can point to any type of variable...

whenever we intialize a variable or pointer in c, appropriate amount of memory is automatically allocated to the
variable by the compiler...

typically for normal variables such as integers, float etc. memory is allocated by compiler and
cannot be changed during runtime(when program is running.)...

where as by using dynamic memory allocation: memory allocated could be changed as program runs.. :)

pointers are helpful to allocate memory dynamically...

dynamic memory allocation reserves space in a memory area called heap...

As we can control the memory using "c" we get more freedom, this freedom is something not present 
with other programming languages... :)


//malloc, 

int* p_number1 = (int*)malloc(100); // 100 bytes are assigned and pointer to first memory address is returned.
int* p_number2 = (int*)malloc(25*sizeof(int)); // 25 integers...


// calloc

int* p_number = (int*)calloc(75, sizeof(int));
// calloc initializes also, all memory locations are initialized with 0


//realloc
realloc helps dynamically reuse or increase previously allocated memory (which was created using calloc/malloc).

if allocation fails it returns a null pointer.., so it does not corrupt any memory allocations :)
so we can add a null pointer check always on using malloc or calloc.


realloc(*ptr, 100);
*ptr-> ptr whose memory we need to extend
100: size of extra bytes we need to add.


malloc returns void* => pointer to any type, hence we can use that and typecast it...

calloc initializes the memory, where as malloc does not initialize the memory...


// person/function who creates the memory should release it, dont put responsibility on other functions to release the memory.


# preprocessor
-> define (statements)
-> include statements
before code is compiled, these are replaced with above statements...

Anything that starts with "#" symbol is nothing but preprocessor command :)

# preprocessor directives

preprocessor directives helps in  removing the duplication of header files :)

***IMP***Thumb rule:

whenever you write a header file
make sure to sandwich entire contents of header 
file in preprocessor directive..

#ifndef __A__
#define __A__

#endif

In C programming language, typedef is a keyword that allows the creation of new data types based on existing ones. The typedef keyword is used to create an alias for an existing data type or structure.

#The general syntax for using typedef is:

typedef existing_data_type new_data_type_name;
typedef unsigned char byte;

In the above example, byte is an alias for the unsigned char data type.

We can use this new data type in our program like this:

byte my_byte = 'A';

In this example, we declare a variable my_byte of type byte and assign it the value of the character 'A'.


Another example of using typedef is to create an alias for a complex data structure. 
Here is an example:
typedef struct {
    int x;
    int y;
} Point;

In the above example, we create a new data type Point which is an alias for a struct with two integer fields.

We can then use this new data type to create variables of type Point, like this:
Point p;
p.x = 10;
p.y = 20;

In this example, we declare a variable p of type Point and assign values to its x and y fields.



# size of pointers
32 bit machines: 4 bytes
64 bit machines: 8 bytes

# Recursive dependency Solution
https://www.udemy.com/course/tcpipstack/learn/lecture/16415272#content
Forward decleration...
Complete decleration...

Using complete dependecy if you cannot resolve the dependency errors
try to resolve them using recursive dependency in your application...


# Purpose and how to write a make file

Makefile is a program building tool which runs in Unix, Linux and their flavours.
It aids in simplifying building the software program that may dependent on various other libraries.

For example, if you have a software program which has:
200 source files - raw material
20 header files - raw material

And you need to create below dishes from above raw material:
10 static libraries
5 shared libraries
3 executables


Then you need to make use of Makefile.
Ofcourse you will go mad if you compile each 
program one by one...Infact it is infeasible and not possible thing to do..


Makefile contains all the commands required to build all the dishes you need.

99% students never use makefile unless they start career in the industry..very sad..

#Makefile

-> Functions/Purpose of Makefile:
   1/ Compiling: This involves compilation of source file inorder to create corresponding object files.
   2/ Linking: 
   3/ Creating required libraries - static and dynamic.
   4/ Create required Executables.
   5/ Installation of Libraries & Executables.
   6/ Update the dependencies.


Makefiles:
Input: Source & Header files, Other precompiled Libraries and Object files.
Output: Libraries, Executables, Installation.


#what does static inline mean in C programming

In C programming, static inline is a function declaration specifier used to declare a function as both static and inline.

static is used to restrict the scope of the function to the file in which it is defined. This means that the function cannot be accessed or called from outside the file.

inline is used to suggest the compiler to perform inlining on the function. This means that the compiler may replace the function call with the actual function code at the call site to improve performance.

The combination of static and inline can be used to declare a small, frequently used function that is private to a specific file and can be inlined to avoid the overhead of function calls.

Heres an example of a static inline function declaration:

static inline int add(int a, int b) {
    return a + b;
}

Note that the use of static inline is just a suggestion to the compiler and it is up to the compiler to decide whether or not to actually inline the function.

# assert

In C programming, assert is a preprocessor macro defined in the <assert.h> header file. It is used to verify the assumptions made by the programmer regarding the behavior of the program at runtime.

The assert macro takes an expression as its argument and checks whether the expression evaluates to true or false. If the expression evaluates to true, the assert macro does nothing and the program continues to execute normally. However, if the expression evaluates to false, the assert macro triggers an assertion failure, which causes the program to terminate immediately.

The basic syntax of the assert macro is as follows:

#include <assert.h>

void some_function(int x) {
    assert(x > 0);
    // ...
}

In the above example, the assert macro checks if the expression x > 0 is true. If x is not greater than 0, the assert macro triggers an assertion failure and the program terminates.

The assert macro is typically used during development and testing to catch programming errors and help diagnose the causes of program crashes. It is not intended to handle errors that can occur during normal operation of the program.